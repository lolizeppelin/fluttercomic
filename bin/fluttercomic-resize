#!/usr/bin/python
# -*- coding:utf-8 -*-
import logging
import sys
import re
from collections import namedtuple

from simpleutil.config import cfg
from simpleutil import systemutils
from simpleutil.utils import threadgroup

import os
import imghdr
import psutil
import subprocess
import eventlet

CONF = cfg.CONF


command_opts = [
    cfg.StrOpt('directory',
               short='d',
               required=True,
               help='Traget directory'),
    cfg.StrOpt('key',
               short='key',
               help='file secrity key'),
    cfg.IntOpt('maxsize',
               short='s',
               default=300000,
               min=100000, max=100000,
               help='img file size'
               )
]

NUMREGEX = re.compile('\d+')

CONVERT = systemutils.find_executable('convert')

POOL = threadgroup.ThreadGroup(thread_pool_size=min(2, psutil.cpu_count()))

FILENAME = namedtuple('filename', ['name', 'keys'])


def files(path):
    keys = 0
    _files = []

    for index, fname in enumerate(os.listdir(path)):
        if index > 500:
            raise ValueError('to much file')
        _keys = re.findall(NUMREGEX, fname)
        kcount = len(_keys)
        if not kcount:
            raise ValueError('%s has no int value in name')
        if keys > 0:
            if kcount != keys:
                raise ValueError('%s int count not as before')
        else:
            keys = len(_keys)
            if keys > 5:
                raise ValueError('int count over then 5')
        _keys = map(int, _keys)
        _files.append(FILENAME(fname, _keys))


    _files.sort(key=lambda x: sum([10**(len(x.keys)-1-index)*value
                                   for index, value in enumerate(x.keys)]))

    return _files


def resize(src, maxsize):
    filesize = os.path.getsize(src)
    if filesize > maxsize:
        persent = float(maxsize) / float(filesize)
        if persent < 0.95:
            return int(persent*100)
    return 100


def not_png(src):
    _type = imghdr.what(src)
    if _type == 'jpg':
        return False
    return True


def build_convert_cmd(src, dst, persent):
    command = [CONVERT, '-strip']
    if persent < 100:
        command.extend(['-resize', '800x600' % persent])
        # command.extend(['-resize', '%d%%' % persent])
        if persent < 70:
            command.extend(['-quality', '70'])
    command.extend([src, dst])
    return ' '.join(command)


def convert(src, dst, persent):
    command = build_convert_cmd(src, dst, persent)

    def run():
        print command
        sub = subprocess.Popen(command, close_fds=True, executable=CONVERT)
        code = sub.wait()
        if code:
            raise ValueError('fail!')
        eventlet.sleep(3)
        if src != dst:
            os.remove(src)
    POOL.add_thread(run)



def main():
    logging.basicConfig(level=logging.WARN)
    CONF.register_cli_opts(command_opts)
    path = CONF.directory
    for index, filename in enumerate(files(path)):
        src = os.path.join(path, filename.name)
        dst = os.path.join(path, '%d.jpg' % (index + 1))
        persent = resize(src, CONF.maxsize)
        try:
            _not_png = not_png(src)
        except Exception:
            print '%s not image file' % src
            continue
        if _not_png or persent < 100:
            convert(src, dst, persent)
        else:
            if src != dst:
                os.rename(src, dst)
    POOL.wait()



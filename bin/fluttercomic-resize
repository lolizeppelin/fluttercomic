#!/usr/bin/python
# -*- coding:utf-8 -*-
from simpleutil.config import cfg
from simpleutil import systemutils
from simpleutil.utils import threadgroup

import logging as default_logging
from simpleutil.log import log as logging

import os
import re
import sys
import time
from collections import namedtuple
import imghdr
import psutil
import subprocess

from fluttercomic.common import IMGEXT

CONF = cfg.CONF
logging.register_options(CONF)

LOG = logging.getLogger('fluttercomic.plugin.convert')

ALLOW = frozenset([ext[1:] for ext in IMGEXT])

JPGHEADS = frozenset([
    (chr(255) + chr(216) + chr(255) + chr(219)),    # FF D8 FF EE
    (chr(255) + chr(216) + chr(255) + chr(238)),    # FF D8 FF DB
])

NUMREGEX = re.compile('\d+')

CONVERT = systemutils.find_executable('convert')

POOL = threadgroup.ThreadGroup(thread_pool_size=min(2, psutil.cpu_count()))

FILENAME = namedtuple('filename', ['name', 'rename', 'keys'])

command_opts = [
    cfg.StrOpt('target',
               short='t',
               required=True,
               help='Traget file or directory'),
    cfg.StrOpt('key',
               short='k',
               help='file secrity key'),
    cfg.StrOpt('size',
               short='s',
               default='800x600',
               choices=['800x600', '1200x900', '1600x1200'],
               help='file new size'),
    cfg.IntOpt('maxsize',
               short='m',
               default=250000,
               min=100000, max=1000000,
               help='img file size'
               ),
    cfg.StrOpt('rename',
               short='r',
               default='main.webp',
               help='img file rename'),
    cfg.IntOpt('timeout',
               short='o',
               default=3600,
               help='max conver execute time'),
    cfg.StrOpt('ext',
               short='e',
               default='webp',
               help='img type file ext')
]


def getfiles(path):
    # keys = 0
    _files = []

    for root, dirs, files in os.walk(path, topdown=True):
    # for index, fname in enumerate(os.listdir(path)):
        for dir in dirs:
            raise ValueError('%s Has folder %s' % (root, dir))
        for fname in files:
            # 提取文件名中的数字
            _keys = re.findall(NUMREGEX, fname)
            # kcount = len(_keys)
            # if not kcount:
            #     raise ValueError('%s has no int value in name')
            # if keys > 0:
            #     if kcount != keys:
            #         raise ValueError('%s int count not as before')
            # else:
            #     keys = len(_keys)
            #     if keys > 5:
            #         raise ValueError('int count over then 5')
            _keys = map(int, _keys)
            _files.append(FILENAME(fname, fname, _keys))

    # 按文件名中的数字排序
    _files.sort(key=lambda x: sum([10**(len(x.keys)-1-i)*value for i, value in enumerate(x.keys)]))

    # for index, _file in enumerate(_files):
    #     _file.rename = '%d.webp' % (index + 1)
    # return _files
    return [FILENAME(_file.name, '%d.%s' % (index+1, CONF.ext), []) for index, _file in enumerate(_files)]


def quality(src, maxsize):
    filesize = os.path.getsize(src)
    if filesize > maxsize:
        persent = float(maxsize) / float(filesize)
        if persent < 0.95:
            return int(persent*100)
    return 100


def get_img_type(src):
    imgtype = imghdr.what(src)
    if imgtype:
        return imgtype
    with open(src, 'rb') as f:
        buf = f.read(12)
        if buf[:4] == 'RIFF' and buf[-4:] == 'WEBP':
            return 'webp'
        if buf[:4] in JPGHEADS:
            return 'jpg'


def is_pic(src):
    imgtype = get_img_type(src)
    if imgtype and imgtype in ALLOW:
        return True
    LOG.error('%s not in allow img file list' % imgtype)
    return False


def build_convert_cmd(src, dst, size):
    command = [CONVERT, '-strip', '-resize', size]
    command.extend([src, dst])
    return command


def build_quality_cmd(src, persent):
    command = [CONVERT]
    if persent < 70:
        command.extend(['-quality', '70'])
    else:
        command.extend(['-quality', '%d' % persent])
    command.extend([src, src])
    return command


def convert(path, imgfile, errors, overtime):
    size = CONF.size
    src = os.path.join(path, imgfile.name)
    dst = os.path.join(path, imgfile.rename)

    timeout = overtime - int(time.time())
    if timeout < 1:
        errors.append(imgfile)
        return

    command = build_convert_cmd(src, dst, size)

    def run():

        sub = subprocess.Popen(command, close_fds=True, executable=CONVERT)
        code = sub.wait()
        if code:
            errors.append(imgfile)
            raise ValueError('conver fail!')
        if src != dst:
            os.remove(src)
        # 压缩后大小超标
        persent = quality(dst, CONF.maxsize)
        if persent < 100:
            # 二次压缩
            LOG.info('quality file %s' % dst)
            next_command = build_quality_cmd(dst, persent)
            sub = subprocess.Popen(next_command, close_fds=True, executable=CONVERT)
            try:
                systemutils.subwait(sub, timeout)
            except (systemutils.ExitBySIG, systemutils.UnExceptExit):
                errors.append(imgfile)
                raise ValueError('conver quality fail!')
        systemutils.chmod(dst, 0o644)

    POOL.add_thread(run)


def main():
    CONF.register_cli_opts(command_opts)
    CONF()
    logging.setup(CONF, 'fluttercomic')
    default_logging.captureWarnings(True)

    overtime = int(time.time()) + CONF.timeout
    path = os.path.abspath(CONF.target)

    if os.path.isdir(path):
        LOG.info('Convert path %s' % CONF.target)
        files = getfiles(path)
    else:
        LOG.info('Convert file %s' % CONF.target)
        path, fname = os.path.split(path)
        files = [FILENAME(fname, CONF.rename, [])]

    if path in ('', '/'):
        LOG.error('Target path value error')
        sys.exit(1)

    for imgfile in files:
        if not is_pic(os.path.join(path, imgfile.name)):
            LOG.error('%s not image file' % imgfile.name)
            sys.exit(1)

    errors = []
    for imgfile in files:
        convert(path, imgfile, errors, overtime)

    POOL.wait()

    if errors:
        for imgfile in files:
            LOG.error('convert %s to %s fail' % (imgfile.name, imgfile.rename))
        sys.exit(1)

    LOG.info('All imgfile convered')


if __name__ == '__main__':
    main()